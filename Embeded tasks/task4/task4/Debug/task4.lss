
task4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000414  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00000414  000004a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080008e  0080008e  000004d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000508  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d30  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000919  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000701  00000000  00000000  00001c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00002330  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000403  00000000  00000000  00002454  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004bf  00000000  00000000  00002857  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002d16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 38       	cpi	r26, 0x8E	; 142
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e8       	ldi	r26, 0x8E	; 142
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 39       	cpi	r26, 0x90	; 144
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 94 01 	call	0x328	; 0x328 <main>
  8a:	0c 94 08 02 	jmp	0x410	; 0x410 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <detectKeyPressed>:
{'1','2','3','-'},
{'C','0','=','+'}};
	
	
char detectKeyPressed()
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
	KEY_DDR = 0x0F;           /* set port direction as input-output */
  96:	8f e0       	ldi	r24, 0x0F	; 15
  98:	81 bb       	out	0x11, r24	; 17
	KEY_PRT = 0xFF; // All on
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	82 bb       	out	0x12, r24	; 18
	
	char val = '\n';
	unsigned char coll, row;
	for(row=0 ; row<4 ; row++ ){
  9e:	60 e0       	ldi	r22, 0x00	; 0
char detectKeyPressed()
{
	KEY_DDR = 0x0F;           /* set port direction as input-output */
	KEY_PRT = 0xFF; // All on
	
	char val = '\n';
  a0:	7a e0       	ldi	r23, 0x0A	; 10
	unsigned char coll, row;
	for(row=0 ; row<4 ; row++ ){
  a2:	45 c0       	rjmp	.+138    	; 0x12e <detectKeyPressed+0x9c>
		KEY_PRT &= ~(1<<row) ;
  a4:	92 b3       	in	r25, 0x12	; 18
  a6:	a6 2f       	mov	r26, r22
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	50 e0       	ldi	r21, 0x00	; 0
  ae:	06 2e       	mov	r0, r22
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <detectKeyPressed+0x24>
  b2:	44 0f       	add	r20, r20
  b4:	55 1f       	adc	r21, r21
  b6:	0a 94       	dec	r0
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <detectKeyPressed+0x20>
  ba:	84 2f       	mov	r24, r20
  bc:	80 95       	com	r24
  be:	98 23       	and	r25, r24
  c0:	92 bb       	out	0x12, r25	; 18
		for(coll=4 ; coll<8 ; coll++){
  c2:	94 e0       	ldi	r25, 0x04	; 4
  c4:	2e c0       	rjmp	.+92     	; 0x122 <detectKeyPressed+0x90>
			unsigned char read = (KEY_PIN >>coll) & 1 ;
  c6:	20 b3       	in	r18, 0x10	; 16
  c8:	e9 2f       	mov	r30, r25
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	09 2e       	mov	r0, r25
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <detectKeyPressed+0x44>
  d2:	35 95       	asr	r19
  d4:	27 95       	ror	r18
  d6:	0a 94       	dec	r0
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <detectKeyPressed+0x40>
			if(read == 0){
  da:	82 2f       	mov	r24, r18
  dc:	81 70       	andi	r24, 0x01	; 1
  de:	20 fd       	sbrc	r18, 0
  e0:	1d c0       	rjmp	.+58     	; 0x11c <detectKeyPressed+0x8a>
  e2:	0f c0       	rjmp	.+30     	; 0x102 <detectKeyPressed+0x70>
				while(read == 0){
					read = (KEY_PIN >>coll) & 1 ;
  e4:	80 b3       	in	r24, 0x10	; 16
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 2e       	mov	r0, r30
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <detectKeyPressed+0x5e>
  ec:	95 95       	asr	r25
  ee:	87 95       	ror	r24
  f0:	0a 94       	dec	r0
  f2:	e2 f7       	brpl	.-8      	; 0xec <detectKeyPressed+0x5a>
  f4:	81 70       	andi	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	c9 ef       	ldi	r28, 0xF9	; 249
  f8:	d0 e0       	ldi	r29, 0x00	; 0
  fa:	21 97       	sbiw	r28, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <detectKeyPressed+0x68>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <detectKeyPressed+0x6e>
 100:	00 00       	nop
	for(row=0 ; row<4 ; row++ ){
		KEY_PRT &= ~(1<<row) ;
		for(coll=4 ; coll<8 ; coll++){
			unsigned char read = (KEY_PIN >>coll) & 1 ;
			if(read == 0){
				while(read == 0){
 102:	88 23       	and	r24, r24
 104:	79 f3       	breq	.-34     	; 0xe4 <detectKeyPressed+0x52>
					read = (KEY_PIN >>coll) & 1 ;
					_delay_ms(1);
				}
				val = keypadMaterix[row][coll-4];
 106:	34 97       	sbiw	r30, 0x04	; 4
 108:	aa 0f       	add	r26, r26
 10a:	bb 1f       	adc	r27, r27
 10c:	aa 0f       	add	r26, r26
 10e:	bb 1f       	adc	r27, r27
 110:	a0 5a       	subi	r26, 0xA0	; 160
 112:	bf 4f       	sbci	r27, 0xFF	; 255
 114:	ea 0f       	add	r30, r26
 116:	fb 1f       	adc	r31, r27
 118:	70 81       	ld	r23, Z
				break;
 11a:	05 c0       	rjmp	.+10     	; 0x126 <detectKeyPressed+0x94>
			}
			if(val != '\n') break;
 11c:	7a 30       	cpi	r23, 0x0A	; 10
 11e:	19 f4       	brne	.+6      	; 0x126 <detectKeyPressed+0x94>
	
	char val = '\n';
	unsigned char coll, row;
	for(row=0 ; row<4 ; row++ ){
		KEY_PRT &= ~(1<<row) ;
		for(coll=4 ; coll<8 ; coll++){
 120:	9f 5f       	subi	r25, 0xFF	; 255
 122:	98 30       	cpi	r25, 0x08	; 8
 124:	80 f2       	brcs	.-96     	; 0xc6 <detectKeyPressed+0x34>
				break;
			}
			if(val != '\n') break;
						
		}
		KEY_PRT |= 1<<row ;
 126:	82 b3       	in	r24, 0x12	; 18
 128:	48 2b       	or	r20, r24
 12a:	42 bb       	out	0x12, r20	; 18
	KEY_DDR = 0x0F;           /* set port direction as input-output */
	KEY_PRT = 0xFF; // All on
	
	char val = '\n';
	unsigned char coll, row;
	for(row=0 ; row<4 ; row++ ){
 12c:	6f 5f       	subi	r22, 0xFF	; 255
 12e:	64 30       	cpi	r22, 0x04	; 4
 130:	08 f4       	brcc	.+2      	; 0x134 <detectKeyPressed+0xa2>
 132:	b8 cf       	rjmp	.-144    	; 0xa4 <detectKeyPressed+0x12>
		KEY_PRT |= 1<<row ;
	}
	
	return val;

 134:	87 2f       	mov	r24, r23
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <lcdWriteCmd>:
 *  Author: Abdelmenam
 */ 
#include "lcd.h"

void lcdWriteCmd(unsigned char cmd){
	LCD_Port= cmd;
 13c:	85 bb       	out	0x15, r24	; 21
	LCD_Command_Port &= ~(1<<RS);	/* RS=0 command reg. */
 13e:	8b b3       	in	r24, 0x1b	; 27
 140:	8e 7f       	andi	r24, 0xFE	; 254
 142:	8b bb       	out	0x1b, r24	; 27
	LCD_Command_Port |= (1<<EN);	/* Enable pulse */
 144:	8b b3       	in	r24, 0x1b	; 27
 146:	82 60       	ori	r24, 0x02	; 2
 148:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	00 00       	nop
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 14c:	8b b3       	in	r24, 0x1b	; 27
 14e:	8d 7f       	andi	r24, 0xFD	; 253
 150:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	8d ee       	ldi	r24, 0xED	; 237
 154:	92 e0       	ldi	r25, 0x02	; 2
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <lcdWriteCmd+0x1a>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <lcdWriteCmd+0x20>
 15c:	00 00       	nop
 15e:	08 95       	ret

00000160 <lcdInit>:
	
}


void  lcdInit(){
	LCD_Command_Dir = 0xFF;	/* Make LCD command port direction as o/p */
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	8a bb       	out	0x1a, r24	; 26
	LCD_Dir = 0xFF;	/* Make LCD data port direction as o/p */
 164:	84 bb       	out	0x14, r24	; 20
 166:	87 e8       	ldi	r24, 0x87	; 135
 168:	93 e1       	ldi	r25, 0x13	; 19
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <lcdInit+0xa>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <lcdInit+0x10>
 170:	00 00       	nop

	_delay_ms(20);		/* LCD Power ON delay always >15ms */
	lcdWriteCmd(0x38);	/* Initialization of 16X2 LCD in 8bit mode */
 172:	88 e3       	ldi	r24, 0x38	; 56
 174:	0e 94 9e 00 	call	0x13c	; 0x13c <lcdWriteCmd>
	lcdWriteCmd(0x0C);	/* Display ON Cursor OFF */
 178:	8c e0       	ldi	r24, 0x0C	; 12
 17a:	0e 94 9e 00 	call	0x13c	; 0x13c <lcdWriteCmd>
	lcdWriteCmd(0x06);	/* Auto Increment cursor */
 17e:	86 e0       	ldi	r24, 0x06	; 6
 180:	0e 94 9e 00 	call	0x13c	; 0x13c <lcdWriteCmd>
	lcdWriteCmd(0x01);	/* clear display */
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	0e 94 9e 00 	call	0x13c	; 0x13c <lcdWriteCmd>
	lcdWriteCmd(0x80);	/* cursor at home position */
 18a:	80 e8       	ldi	r24, 0x80	; 128
 18c:	0e 94 9e 00 	call	0x13c	; 0x13c <lcdWriteCmd>
 190:	08 95       	ret

00000192 <lcdWriteChar>:
}

void lcdWriteChar(unsigned char charachter){
	LCD_Port = charachter;
 192:	85 bb       	out	0x15, r24	; 21
	LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
 194:	8b b3       	in	r24, 0x1b	; 27
 196:	81 60       	ori	r24, 0x01	; 1
 198:	8b bb       	out	0x1b, r24	; 27
	LCD_Command_Port |= (1<<EN);	/* Enable Pulse */
 19a:	8b b3       	in	r24, 0x1b	; 27
 19c:	82 60       	ori	r24, 0x02	; 2
 19e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a0:	00 00       	nop
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 1a2:	8b b3       	in	r24, 0x1b	; 27
 1a4:	8d 7f       	andi	r24, 0xFD	; 253
 1a6:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	89 ef       	ldi	r24, 0xF9	; 249
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcdWriteChar+0x1a>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lcdWriteChar+0x20>
 1b2:	00 00       	nop
 1b4:	08 95       	ret

000001b6 <lcdPrint>:
	_delay_ms(1);
}


void lcdPrint(const char* text ){
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	ec 01       	movw	r28, r24
	
	for(uint8_t i=0 ; i< strlen(text) ; i++){
 1be:	10 e0       	ldi	r17, 0x00	; 0
 1c0:	07 c0       	rjmp	.+14     	; 0x1d0 <lcdPrint+0x1a>
		lcdWriteChar(text[i]);
 1c2:	fe 01       	movw	r30, r28
 1c4:	e8 0f       	add	r30, r24
 1c6:	f9 1f       	adc	r31, r25
 1c8:	80 81       	ld	r24, Z
 1ca:	0e 94 c9 00 	call	0x192	; 0x192 <lcdWriteChar>
}


void lcdPrint(const char* text ){
	
	for(uint8_t i=0 ; i< strlen(text) ; i++){
 1ce:	1f 5f       	subi	r17, 0xFF	; 255
 1d0:	81 2f       	mov	r24, r17
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	fe 01       	movw	r30, r28
 1d6:	01 90       	ld	r0, Z+
 1d8:	00 20       	and	r0, r0
 1da:	e9 f7       	brne	.-6      	; 0x1d6 <lcdPrint+0x20>
 1dc:	31 97       	sbiw	r30, 0x01	; 1
 1de:	ec 1b       	sub	r30, r28
 1e0:	fd 0b       	sbc	r31, r29
 1e2:	8e 17       	cp	r24, r30
 1e4:	9f 07       	cpc	r25, r31
 1e6:	68 f3       	brcs	.-38     	; 0x1c2 <lcdPrint+0xc>
		lcdWriteChar(text[i]);
	}
}
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	1f 91       	pop	r17
 1ee:	08 95       	ret

000001f0 <lcdNewLine>:

void lcdNewLine(){
		lcdWriteCmd(0xC0);		/* Go to 2nd line*/
 1f0:	80 ec       	ldi	r24, 0xC0	; 192
 1f2:	0e 94 9e 00 	call	0x13c	; 0x13c <lcdWriteCmd>
 1f6:	08 95       	ret

000001f8 <lcdClear>:
}

void lcdClear(){
	lcdWriteCmd(0x01);
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	0e 94 9e 00 	call	0x13c	; 0x13c <lcdWriteCmd>
 1fe:	08 95       	ret

00000200 <calculatorAction>:
}


void calculatorAction(unsigned char button){

	if(op == '0'){
 200:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <op>
 204:	90 33       	cpi	r25, 0x30	; 48
 206:	71 f4       	brne	.+28     	; 0x224 <calculatorAction+0x24>
		num1 = num1*10 +button - 48; 
 208:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <num1>
 20c:	99 0f       	add	r25, r25
 20e:	29 2f       	mov	r18, r25
 210:	22 0f       	add	r18, r18
 212:	22 0f       	add	r18, r18
 214:	92 0f       	add	r25, r18
 216:	98 0f       	add	r25, r24
 218:	90 53       	subi	r25, 0x30	; 48
 21a:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <num1>
		lcdWriteChar(button);
 21e:	0e 94 c9 00 	call	0x192	; 0x192 <lcdWriteChar>
 222:	08 95       	ret
	}
	else{
		num2 = num2*10 + button - 48;
 224:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <__data_end>
 228:	99 0f       	add	r25, r25
 22a:	29 2f       	mov	r18, r25
 22c:	22 0f       	add	r18, r18
 22e:	22 0f       	add	r18, r18
 230:	92 0f       	add	r25, r18
 232:	98 0f       	add	r25, r24
 234:	90 53       	subi	r25, 0x30	; 48
 236:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <__data_end>
		lcdWriteChar(button);
 23a:	0e 94 c9 00 	call	0x192	; 0x192 <lcdWriteChar>
 23e:	08 95       	ret

00000240 <calculate>:
	
	
}

int calculate(){
	switch (op)
 240:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <op>
 244:	8b 32       	cpi	r24, 0x2B	; 43
 246:	49 f0       	breq	.+18     	; 0x25a <calculate+0x1a>
 248:	18 f4       	brcc	.+6      	; 0x250 <calculate+0x10>
 24a:	8a 32       	cpi	r24, 0x2A	; 42
 24c:	b1 f0       	breq	.+44     	; 0x27a <calculate+0x3a>
 24e:	25 c0       	rjmp	.+74     	; 0x29a <calculate+0x5a>
 250:	8d 32       	cpi	r24, 0x2D	; 45
 252:	59 f0       	breq	.+22     	; 0x26a <calculate+0x2a>
 254:	8f 32       	cpi	r24, 0x2F	; 47
 256:	c9 f0       	breq	.+50     	; 0x28a <calculate+0x4a>
 258:	20 c0       	rjmp	.+64     	; 0x29a <calculate+0x5a>
	{
		case '+' :
		return (num1 + num2) ;
 25a:	20 91 8f 00 	lds	r18, 0x008F	; 0x80008f <num1>
 25e:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	82 0f       	add	r24, r18
 266:	91 1d       	adc	r25, r1
 268:	08 95       	ret
		case '-' :
		return (num1 - num2) ;
 26a:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <num1>
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <__data_end>
 274:	82 1b       	sub	r24, r18
 276:	91 09       	sbc	r25, r1
 278:	08 95       	ret
		case '*' :
		return (num1 * num2) ;
 27a:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <num1>
 27e:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <__data_end>
 282:	89 9f       	mul	r24, r25
 284:	c0 01       	movw	r24, r0
 286:	11 24       	eor	r1, r1
 288:	08 95       	ret
		case '/' :
		return (num1 / num2) ;
 28a:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <num1>
 28e:	60 91 8e 00 	lds	r22, 0x008E	; 0x80008e <__data_end>
 292:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__udivmodqi4>
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	08 95       	ret
	}
	return num1;
 29a:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <num1>
 29e:	90 e0       	ldi	r25, 0x00	; 0

}
 2a0:	08 95       	ret

000002a2 <show_sum>:

void show_sum(int sum){
 2a2:	0f 93       	push	r16
 2a4:	1f 93       	push	r17
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
 2ae:	64 97       	sbiw	r28, 0x14	; 20
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	f8 94       	cli
 2b4:	de bf       	out	0x3e, r29	; 62
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	cd bf       	out	0x3d, r28	; 61
	int counter=0 ;
 2ba:	00 e0       	ldi	r16, 0x00	; 0
 2bc:	10 e0       	ldi	r17, 0x00	; 0
	int array[10];
	while(sum != 0)
 2be:	13 c0       	rjmp	.+38     	; 0x2e6 <show_sum+0x44>
	{
		array[counter] = sum%10 ;
 2c0:	6a e0       	ldi	r22, 0x0A	; 10
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__divmodhi4>
 2c8:	f8 01       	movw	r30, r16
 2ca:	ee 0f       	add	r30, r30
 2cc:	ff 1f       	adc	r31, r31
 2ce:	21 e0       	ldi	r18, 0x01	; 1
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	2c 0f       	add	r18, r28
 2d4:	3d 1f       	adc	r19, r29
 2d6:	e2 0f       	add	r30, r18
 2d8:	f3 1f       	adc	r31, r19
 2da:	91 83       	std	Z+1, r25	; 0x01
 2dc:	80 83       	st	Z, r24
		counter ++ ;
 2de:	0f 5f       	subi	r16, 0xFF	; 255
 2e0:	1f 4f       	sbci	r17, 0xFF	; 255
		sum=sum/10;
 2e2:	86 2f       	mov	r24, r22
 2e4:	97 2f       	mov	r25, r23
}

void show_sum(int sum){
	int counter=0 ;
	int array[10];
	while(sum != 0)
 2e6:	00 97       	sbiw	r24, 0x00	; 0
 2e8:	59 f7       	brne	.-42     	; 0x2c0 <show_sum+0x1e>
	{
		array[counter] = sum%10 ;
		counter ++ ;
		sum=sum/10;
	}
	counter -- ;
 2ea:	01 50       	subi	r16, 0x01	; 1
 2ec:	11 09       	sbc	r17, r1
	for(counter ; counter >=0 ; counter -- ){
 2ee:	0f c0       	rjmp	.+30     	; 0x30e <show_sum+0x6c>
		lcdWriteChar(48+array[counter]);
 2f0:	f8 01       	movw	r30, r16
 2f2:	ee 0f       	add	r30, r30
 2f4:	ff 1f       	adc	r31, r31
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	8c 0f       	add	r24, r28
 2fc:	9d 1f       	adc	r25, r29
 2fe:	e8 0f       	add	r30, r24
 300:	f9 1f       	adc	r31, r25
 302:	80 81       	ld	r24, Z
 304:	80 5d       	subi	r24, 0xD0	; 208
 306:	0e 94 c9 00 	call	0x192	; 0x192 <lcdWriteChar>
		array[counter] = sum%10 ;
		counter ++ ;
		sum=sum/10;
	}
	counter -- ;
	for(counter ; counter >=0 ; counter -- ){
 30a:	01 50       	subi	r16, 0x01	; 1
 30c:	11 09       	sbc	r17, r1
 30e:	11 23       	and	r17, r17
 310:	7c f7       	brge	.-34     	; 0x2f0 <show_sum+0x4e>
		lcdWriteChar(48+array[counter]);
	}
}
 312:	64 96       	adiw	r28, 0x14	; 20
 314:	0f b6       	in	r0, 0x3f	; 63
 316:	f8 94       	cli
 318:	de bf       	out	0x3e, r29	; 62
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	cd bf       	out	0x3d, r28	; 61
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	1f 91       	pop	r17
 324:	0f 91       	pop	r16
 326:	08 95       	ret

00000328 <main>:
void show_sum(int sum);


int main(void)
{
    lcdInit();
 328:	0e 94 b0 00 	call	0x160	; 0x160 <lcdInit>
	lcdPrint("Somicolon Task4");
 32c:	81 e7       	ldi	r24, 0x71	; 113
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcdPrint>
	lcdNewLine();
 334:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcdNewLine>
	lcdPrint("Menam elbahy");
 338:	81 e8       	ldi	r24, 0x81	; 129
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcdPrint>
 340:	2f e3       	ldi	r18, 0x3F	; 63
 342:	8d e0       	ldi	r24, 0x0D	; 13
 344:	93 e0       	ldi	r25, 0x03	; 3
 346:	21 50       	subi	r18, 0x01	; 1
 348:	80 40       	sbci	r24, 0x00	; 0
 34a:	90 40       	sbci	r25, 0x00	; 0
 34c:	e1 f7       	brne	.-8      	; 0x346 <main+0x1e>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <main+0x28>
 350:	00 00       	nop
	_delay_ms(1000);
	lcdClear();
 352:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcdClear>

	while (1) 
    {
		unsigned char button = detectKeyPressed();
 356:	0e 94 49 00 	call	0x92	; 0x92 <detectKeyPressed>
		if(button != '\n'){
 35a:	8a 30       	cpi	r24, 0x0A	; 10
 35c:	e1 f3       	breq	.-8      	; 0x356 <main+0x2e>
			if(button == 'C'){
 35e:	83 34       	cpi	r24, 0x43	; 67
 360:	51 f4       	brne	.+20     	; 0x376 <main+0x4e>
				num1 = 0 ;
 362:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <num1>
				num2 = 0;
 366:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <__data_end>
				op = '0';
 36a:	80 e3       	ldi	r24, 0x30	; 48
 36c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <op>
				lcdClear();
 370:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcdClear>
 374:	f0 cf       	rjmp	.-32     	; 0x356 <main+0x2e>
			} else if(button == '/' || button == '+' || button == '-' || button == '*'){
 376:	8f 32       	cpi	r24, 0x2F	; 47
 378:	31 f0       	breq	.+12     	; 0x386 <main+0x5e>
 37a:	8b 32       	cpi	r24, 0x2B	; 43
 37c:	21 f0       	breq	.+8      	; 0x386 <main+0x5e>
 37e:	8d 32       	cpi	r24, 0x2D	; 45
 380:	11 f0       	breq	.+4      	; 0x386 <main+0x5e>
 382:	8a 32       	cpi	r24, 0x2A	; 42
 384:	29 f4       	brne	.+10     	; 0x390 <main+0x68>
				op = button ;
 386:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <op>
				lcdWriteChar(button);
 38a:	0e 94 c9 00 	call	0x192	; 0x192 <lcdWriteChar>
 38e:	e3 cf       	rjmp	.-58     	; 0x356 <main+0x2e>
			}else if(button == '='){
 390:	8d 33       	cpi	r24, 0x3D	; 61
 392:	39 f4       	brne	.+14     	; 0x3a2 <main+0x7a>
				lcdWriteChar(button);
 394:	0e 94 c9 00 	call	0x192	; 0x192 <lcdWriteChar>
				int sum =  calculate();
 398:	0e 94 20 01 	call	0x240	; 0x240 <calculate>
				show_sum(sum);
 39c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <show_sum>
 3a0:	da cf       	rjmp	.-76     	; 0x356 <main+0x2e>
			}else{
				calculatorAction(button);			
 3a2:	0e 94 00 01 	call	0x200	; 0x200 <calculatorAction>
 3a6:	d7 cf       	rjmp	.-82     	; 0x356 <main+0x2e>

000003a8 <__udivmodqi4>:
 3a8:	99 1b       	sub	r25, r25
 3aa:	79 e0       	ldi	r23, 0x09	; 9
 3ac:	04 c0       	rjmp	.+8      	; 0x3b6 <__udivmodqi4_ep>

000003ae <__udivmodqi4_loop>:
 3ae:	99 1f       	adc	r25, r25
 3b0:	96 17       	cp	r25, r22
 3b2:	08 f0       	brcs	.+2      	; 0x3b6 <__udivmodqi4_ep>
 3b4:	96 1b       	sub	r25, r22

000003b6 <__udivmodqi4_ep>:
 3b6:	88 1f       	adc	r24, r24
 3b8:	7a 95       	dec	r23
 3ba:	c9 f7       	brne	.-14     	; 0x3ae <__udivmodqi4_loop>
 3bc:	80 95       	com	r24
 3be:	08 95       	ret

000003c0 <__divmodhi4>:
 3c0:	97 fb       	bst	r25, 7
 3c2:	07 2e       	mov	r0, r23
 3c4:	16 f4       	brtc	.+4      	; 0x3ca <__divmodhi4+0xa>
 3c6:	00 94       	com	r0
 3c8:	07 d0       	rcall	.+14     	; 0x3d8 <__divmodhi4_neg1>
 3ca:	77 fd       	sbrc	r23, 7
 3cc:	09 d0       	rcall	.+18     	; 0x3e0 <__divmodhi4_neg2>
 3ce:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <__udivmodhi4>
 3d2:	07 fc       	sbrc	r0, 7
 3d4:	05 d0       	rcall	.+10     	; 0x3e0 <__divmodhi4_neg2>
 3d6:	3e f4       	brtc	.+14     	; 0x3e6 <__divmodhi4_exit>

000003d8 <__divmodhi4_neg1>:
 3d8:	90 95       	com	r25
 3da:	81 95       	neg	r24
 3dc:	9f 4f       	sbci	r25, 0xFF	; 255
 3de:	08 95       	ret

000003e0 <__divmodhi4_neg2>:
 3e0:	70 95       	com	r23
 3e2:	61 95       	neg	r22
 3e4:	7f 4f       	sbci	r23, 0xFF	; 255

000003e6 <__divmodhi4_exit>:
 3e6:	08 95       	ret

000003e8 <__udivmodhi4>:
 3e8:	aa 1b       	sub	r26, r26
 3ea:	bb 1b       	sub	r27, r27
 3ec:	51 e1       	ldi	r21, 0x11	; 17
 3ee:	07 c0       	rjmp	.+14     	; 0x3fe <__udivmodhi4_ep>

000003f0 <__udivmodhi4_loop>:
 3f0:	aa 1f       	adc	r26, r26
 3f2:	bb 1f       	adc	r27, r27
 3f4:	a6 17       	cp	r26, r22
 3f6:	b7 07       	cpc	r27, r23
 3f8:	10 f0       	brcs	.+4      	; 0x3fe <__udivmodhi4_ep>
 3fa:	a6 1b       	sub	r26, r22
 3fc:	b7 0b       	sbc	r27, r23

000003fe <__udivmodhi4_ep>:
 3fe:	88 1f       	adc	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	5a 95       	dec	r21
 404:	a9 f7       	brne	.-22     	; 0x3f0 <__udivmodhi4_loop>
 406:	80 95       	com	r24
 408:	90 95       	com	r25
 40a:	bc 01       	movw	r22, r24
 40c:	cd 01       	movw	r24, r26
 40e:	08 95       	ret

00000410 <_exit>:
 410:	f8 94       	cli

00000412 <__stop_program>:
 412:	ff cf       	rjmp	.-2      	; 0x412 <__stop_program>
