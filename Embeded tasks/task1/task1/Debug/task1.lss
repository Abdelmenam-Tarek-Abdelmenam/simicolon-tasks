
task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000764  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c1  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000359  00000000  00000000  00000f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  00001288  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000331  00000000  00000000  00001344  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000058  00000000  00000000  00001675  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{

	setButton();
  6c:	0e 94 52 00 	call	0xa4	; 0xa4 <setButton>
	setPullUp();
  70:	0e 94 56 00 	call	0xac	; 0xac <setPullUp>
	setLed();
  74:	0e 94 46 00 	call	0x8c	; 0x8c <setLed>
  
    while (1) 
    {
		if(buttonValue() == 0){
  78:	0e 94 5a 00 	call	0xb4	; 0xb4 <buttonValue>
  7c:	81 11       	cpse	r24, r1
  7e:	03 c0       	rjmp	.+6      	; 0x86 <main+0x1a>
			ledOn();
  80:	0e 94 4a 00 	call	0x94	; 0x94 <ledOn>
  84:	f9 cf       	rjmp	.-14     	; 0x78 <main+0xc>
		}else{
			ledOff();
  86:	0e 94 4e 00 	call	0x9c	; 0x9c <ledOff>
  8a:	f6 cf       	rjmp	.-20     	; 0x78 <main+0xc>

0000008c <setLed>:
	ledDirection |= (1<< ledPin ) ;
}


void toggleLed(){
	ledPort ^= 1 << ledPin ;
  8c:	84 b3       	in	r24, 0x14	; 20
  8e:	81 60       	ori	r24, 0x01	; 1
  90:	84 bb       	out	0x14, r24	; 20
  92:	08 95       	ret

00000094 <ledOn>:
}

void ledOn(){
	ledPort |= 1<<ledPin; 
  94:	85 b3       	in	r24, 0x15	; 21
  96:	81 60       	ori	r24, 0x01	; 1
  98:	85 bb       	out	0x15, r24	; 21
  9a:	08 95       	ret

0000009c <ledOff>:
}

void ledOff(){
	ledPort &= ~(1<<ledPin);
  9c:	85 b3       	in	r24, 0x15	; 21
  9e:	8e 7f       	andi	r24, 0xFE	; 254
  a0:	85 bb       	out	0x15, r24	; 21
  a2:	08 95       	ret

000000a4 <setButton>:

#include "push_buttons.h"


void setButton(){
	buttonDirection &= ~(1<<buttonPin)  ;
  a4:	84 b3       	in	r24, 0x14	; 20
  a6:	8d 7f       	andi	r24, 0xFD	; 253
  a8:	84 bb       	out	0x14, r24	; 20
  aa:	08 95       	ret

000000ac <setPullUp>:
}

void setPullUp(){
	buttonPort |= (1<< buttonPin ) ; 
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	85 bb       	out	0x15, r24	; 21
  b2:	08 95       	ret

000000b4 <buttonValue>:
}

char buttonValue(){
	return (PINC >>buttonPin) & 1 ;
  b4:	83 b3       	in	r24, 0x13	; 19
  b6:	86 95       	lsr	r24
  b8:	81 70       	andi	r24, 0x01	; 1
  ba:	08 95       	ret

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
